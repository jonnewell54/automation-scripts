// /* FILENAME HERE */

/*
    Meraki Dashboard API SDK module for Node.js
    
    The SDK requires the Axios package: https://www.npmjs.com/package/axios
    
    How to use this module:
    * Copy the module to the same directory as your Node.js code
    * Rename the file to Meraki.js
    * Add the following lines to your code, replacing <api_key> with your Meraki Dashboard API key:
    
        const Meraki = require('./Meraki');
        var api = new Meraki.MerakiClass("<api_key>");
    
    * After that, you can use the endpoint methods like in this example:
    
        api.getOrganizations()
            .then(function(response){
                // Code for handling request success
                console.log(response);
            }).catch(function (error) {
                // Code for handling request error
                console.log(error);
            });
    
            
    How to find endpoints in the module file:
    * Go to the Meraki Dashboard API documentation page: https://developer.cisco.com/meraki/api-v1/
    * Find the endpoint that you want to use
    * Copy its Operation Id and locate it in the module file using the search function of your text editor

    General structure of endpoints in the generated SDK:
    
    MerakiClass.<operation_id>(<url_param_1>, <url_param_2>, <query>, <body>)

    
        
    Every endpoint method has a unique name that corresponds to the operation to be carried out by the Meraki Dashboard:
    * <operation_id>: This is the Operation Id of the endpoint, as specified in the Meraki Dashboard API documentation page
        
    Depending on the endpoint, it can require additional arguments to function. Refer to the particular endpoint method for its additional arguments. They can be the following:
    * <url_param_1>, <url_param_2>: The URL of the endpoint you are using might contain variable parts. For example, getOrganizationNetworks requires an organizationId. If needed, these are mandatory
    * <query>: If the endpoint you are using has the option to receive additional parameters as a query string, they can be provided using this argument object. See example below on how to use it
    * <body>: If the endpoint you are using has the option to receive additional parameters as a request body, they can be provided using this argument object. See example below on how to use it
            
    Using an endpoint that has query string parameter options:
    
        const Meraki = require('./Meraki');
        var api = new Meraki.MerakiClass("12345678");
        var serial = "AAAA-BBBB-CCCC";
        var query = { timespan: 10000 };
        api.getDeviceClients(serial, query)
            .then(function(response){
                // Code for handling request success
                console.log(response);
            }).catch(function (error) {
                // Code for handling request error
                console.log(error);
            });
    
            
    Using an endpoint that has request body parameter options:
    
        const Meraki = require('./Meraki');
        var api = new Meraki.MerakiClass("12345678");
        var organizationId = "87654321";
        var body = { name: "New network" };
        api.createOrganizationNetwork (organizationId, body)
            .then(function(response){
                // Code for handling request success
                console.log(response);
            }).catch(function (error) {
                // Code for handling request error
                console.log(error);
            });
    

    The endpoint methods return a Promise that is resolved or rejected with the following structure:
    
        {
            success: <boolean>,
            status: <integer>,
            data: <object>,
            errors: <object>
        }
    
    * success: This is a boolean that flags if the request was successful or not. True indicates that the request was sent and the response had a HTTP status code of 2xx. False indicates failure to communicate with the Meraki Dashboard or a HTTP status code of 4xx/5xx
    * status: The HTTP status code returned by the Meraki Dashboard
    * data: The response body returned by the Meraki Dashboard, if the request was successful
    * errors: The error explanations returned by the Meraki Dashboard, if any
        
*/


const DEFAULT_BASE_URL              = "https://api.meraki.com/api/v1";
const DEFAULT_API_REQUEST_TIMEOUT   = 60000; // milliseconds
const DEFAULT_API_KEY               = "6bec40cf957de430a6f1f2baa056b99a4fac9ea0"; // Sandbox API key

const HTTP_STATUS_NOT_FOUND         = 404;
const HTTP_STATUS_RATE_LIMIT        = 429;

const MAX_RESEND_RETRIES            = 10;
const DEFAULT_BACKOFF_MS            = 5000;

const axios = require('axios');

class MerakiClass {
    constructor(apiKey, baseUrl, timeout) {
        var apiKeyBuffer    = DEFAULT_API_KEY; 
        var baseUrlBuffer   = DEFAULT_BASE_URL;    
        var timeoutBuffer   = DEFAULT_API_REQUEST_TIMEOUT;    

        try {
            if (typeof apiKey != "undefined" && apiKey != null) {
                apiKeyBuffer = apiKey.toString();
            }
                   
            if (typeof baseUrl != "undefined" && baseUrl != null) {
                baseUrlBuffer = baseUrl.toString();
            }
                  
            if (typeof timeout != "undefined" && timeout != null) {
                timeoutBuffer = timeout.toString().parseInt()*1000;
            }            
        }
        catch (error) {
            console.log(error);
        }
    
        this.api = axios.create({
                baseURL: baseUrlBuffer,
                timeout: timeoutBuffer, 
                headers: {"X-Cisco-Meraki-API-Key": apiKeyBuffer}
            });
    }
    
    validateMethod(method) {
        const validMethods = ['get', 'put', 'post', 'delete'];
        var methodIsValid = true;
        try {
            var lowerCaseVerb = method.toString().toLowerCase();            
        }
        catch (error) {
            console.log(error);
            methodIsValid = false;
        }
        
        if (methodIsValid) {
            if (!validMethods.includes(lowerCaseVerb)) {
                console.log("Invalid method: " + lowerCaseVerb);
                methodIsValid = false;                    
            }
        }
        return methodIsValid;
    }
    
    formQueryString(queryObject) {
        var result = "";
        if (typeof queryObject != "undefined" && queryObject != null) {
            for (var item in queryObject) {
                if (Array.isArray(queryObject[item])) {
                    var prefix = item + "[]=";
                    for (var i in queryObject[item]) {
                        result = (result == "") ? "?" : result + "&";
                        result = result + prefix + queryObject[item][i].toString();
                    }
                } else {
                    result = (result == "") ? "?" : result + "&";
                    result = result + item + "=" + queryObject[item].toString();
                }
            }
        }
            
        return result;
    }
    
    request(self, method, endpoint, config, retry) { 
        
        return new Promise(function (resolve, reject) {
            
            var methodIsValid = self.validateMethod(method);
            
            if (!methodIsValid) {
                reject({errors: ["Invalid method"]});
            }
            else {                
                var retryNumber = 0;
                if (typeof retry == "number") {
                    retryNumber = retry;
                }
                
                // for retries, etc
                var dataOnlyConfig = null;
                
                var axiosConfig = {
                    url: endpoint,
                    method: method.toString().toLowerCase()
                };
                
                if (typeof config != "undefined" && config != null) {
                    if ("query" in config && config.query != null) {                    
                        axiosConfig.url = axiosConfig.url + self.formQueryString(config.query);
                    }
                    
                    if ("data" in config && config.data != null) {
                        axiosConfig.data = config.data;
                        
                        // for retries, etc
                        dataOnlyConfig = {data: config.data};
                    }
                }
                                
                var returnValues = {
                    success: false,
                    status: HTTP_STATUS_NOT_FOUND,
                    data: null,
                    errors: null
                };
                
                console.log(method.toString().toUpperCase() + " " + axiosConfig.url);
                
                self.api(axiosConfig)
                    .then(function(response) {                        
                        if("link" in response.request.res.headers) {
                            var nextPageNotFound = true;
                            var linkRecord = response.request.res.headers.link.split(", ");
                            for (var i = 0; i < linkRecord.length; i++) {
                                var splitRecord = linkRecord[i].split("; ");
                                if (splitRecord[1] == "rel=next") {
                                    nextPageNotFound = false;
                                    
                                    var nextUrl = splitRecord[0].substring(1, splitRecord[0].length-1);                                    
                                    var nextEndpoint = nextUrl.split("meraki.com/api/v1")[1];
                                                                        
                                    self.request(self, axiosConfig.method, nextEndpoint, dataOnlyConfig, 0)
                                        .then(function(nextResponse) {
                                            var combined = [];
                                            
                                            for (var i in response.data) {
                                                combined.push(response.data[i]);
                                            };
                                            
                                            for (var j in nextResponse.data) {
                                                combined.push(nextResponse.data[j]);
                                            };
                                            
                                            returnValues.success = true;
                                            returnValues.status = nextResponse.status;
                                            returnValues.data = combined;
                                            
                                            resolve(returnValues);   
                                        })
                                        .catch(function(error) {
                                            if ("status" in error) {
                                                returnValues.status = error.status;                                
                                            }
                                            if ("errors" in error) {
                                                returnValues.errors = error.errors;                                
                                            }
                                            reject(returnValues);                                         
                                        });
                                        
                                    break;
                                }         
                            }
                            
                            if (nextPageNotFound) {
                                // this is the FINAL response page
                                returnValues.success = true;
                                returnValues.status = response.request.res.statusCode;
                                returnValues.data = response.data;    
                                resolve(returnValues);
                            }
                        }
                        else {
                            // this is the ONLY response page
                            returnValues.success = true;
                            returnValues.status = response.request.res.statusCode;
                            returnValues.data = response.data;                            
                            resolve(returnValues);                         
                        }
                    })
                    .catch(function(error) {                        
                        if ("response" in error && "status" in error.response && error.response.status == HTTP_STATUS_RATE_LIMIT) {
                            // Hit rate limiter, retry if able
                            
                            retryNumber += 1;
                            if (retryNumber <= MAX_RESEND_RETRIES) {
                                // Still have retries left, back off and resend
                                
                                // https://www.geeksforgeeks.org/how-to-wait-for-a-promise-to-finish-before-returning-the-variable-of-a-function/
                                const wait=ms=>new Promise(resolve => setTimeout(resolve, ms));
                                
                                var backOffTimerMs = DEFAULT_BACKOFF_MS;
                                
                                if ( "retry-after" in error.response.headers) {
                                    backOffTimerMs = error.response.headers["retry-after"]*1000;
                                }
                                console.log("request: Hit API rate limit. Waiting " + backOffTimerMs + "ms before retry");
                                
                                wait(backOffTimerMs).then(() => {
                                    self.request(self, axiosConfig.method, axiosConfig.url, dataOnlyConfig, retryNumber+1)
                                        .then(function(retryResponse){
                                            // Yay, this time it went through. Use response as own response                                            
                                            returnValues.success = true;
                                            returnValues.status = retryResponse.status;
                                            returnValues.data = retryResponse.data;                            
                                            resolve(returnValues); 
                                            
                                        })
                                        .catch(function(retryError){
                                            // Request unsuccessful. Either out of retries or general error. Fail
                                            returnValues.status = retryError.status;
                                            returnValues.errors = retryError.errors;
                                            reject(returnValues);                                            
                                        });
                                }).catch(() => {
                                    console.log("request: Retry wait failed");
                                });                                
                            } else {
                                // Hit max retries, give up
                                returnValues.status = HTTP_STATUS_RATE_LIMIT;
                                returnValues.errors = ["API busy. Max retries reached"];
                                reject(returnValues);    
                            }
                            
                        } else {
                            // Did not hit rate limiter, this is some other error. Do not retry, just fail
                            if ("response" in error) {
                                try {
                                    if ('errors' in error.response.data) {
                                        returnValues.errors = error.response.data.errors;
                                    }
                                }
                                catch (err) {
                                    console.log('ERROR: API Returned non-JSON error format')
                                }      
                                if ("status" in error.response) {
                                    returnValues.status = error.response.status;                                
                                }                        
                            }
                            reject(returnValues);
                        }
                    });                                
            }
        });
    }
    
    
/*
    ////////////////////

    SECTION: ENDPOINT ACCESS METHODS BELOW
    
    ////////////////////
*/
    
    
/* ENDPOINTS HERE */
    
} // class MerakiClass

var Meraki = new MerakiClass();

module.exports = Meraki;
module.exports.MerakiClass = MerakiClass;
